# Git Conventional Commits

Rule for automatically committing changes made by CursorAI using conventional commits format.

<rule>
name: conventional_commits
description: Automatically commit changes made by CursorAI using conventional commits format
filters:
  - type: event
    pattern: "file_save|file_create|file_modify"
  - type: file_extension
    pattern: ".*"
  - type: content_change
    pattern: ".*"

actions:
  - type: suggest
    message: |
      When making changes, consider using conventional commits format for git commits:

      Format: <type>(<scope>): <description>

      Types:
      - feat: A new feature
      - fix: A bug fix
      - docs: Documentation only changes
      - style: Changes that do not affect the meaning of the code
      - refactor: A code change that neither fixes a bug nor adds a feature
      - perf: A code change that improves performance
      - test: Adding missing tests or correcting existing tests
      - chore: Changes to the build process or auxiliary tools

      The scope should be derived from the file path or affected component.
      The description should be clear and concise, written in imperative mood.

  - type: execute
    when: "git_status_changed"
    command: |
      # Extract the change type and scope from the changes
      CHANGE_TYPE=""
      case "$CHANGE_DESCRIPTION" in
        *"add"*|*"create"*|*"implement"*|*"new"*) CHANGE_TYPE="feat";;
        *"fix"*|*"correct"*|*"resolve"*|*"bug"*) CHANGE_TYPE="fix";;
        *"refactor"*|*"restructure"*|*"reorganize"*) CHANGE_TYPE="refactor";;
        *"test"*|*"spec"*) CHANGE_TYPE="test";;
        *"doc"*|*"comment"*|*"readme"*) CHANGE_TYPE="docs";;
        *"style"*|*"format"*|*"lint"*) CHANGE_TYPE="style";;
        *"perf"*|*"optimize"*|*"performance"*) CHANGE_TYPE="perf";;
        *"build"*|*"ci"*|*"config"*) CHANGE_TYPE="chore";;
        *) CHANGE_TYPE="chore";;
      esac

      # Extract scope from file path
      SCOPE=$(dirname "$FILE" | tr '/' '-')
      if [ -z "$SCOPE" ] || [ "$SCOPE" = "." ]; then
        SCOPE="root"
      fi

      # Commit the changes
      git add "$FILE"
      git commit -m "$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION"

examples:
  - input: |
      # After adding a new function
      CHANGE_DESCRIPTION="add user authentication function"
      FILE="src/auth/login.ts"
    output: "feat(src-auth): add user authentication function"

  - input: |
      # After fixing a bug
      CHANGE_DESCRIPTION="fix incorrect date parsing"
      FILE="lib/utils/date.js"
    output: "fix(lib-utils): fix incorrect date parsing"

  - input: |
      # After updating documentation
      CHANGE_DESCRIPTION="update API documentation"
      FILE="README.md"
    output: "docs(root): update API documentation"

  - input: |
      # After refactoring code
      CHANGE_DESCRIPTION="refactor user service for better performance"
      FILE="services/user_service.py"
    output: "refactor(services): refactor user service for better performance"

metadata:
  priority: high
  version: 1.0
</rule>
alwaysApply: false
---
